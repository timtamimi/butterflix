{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","React","useState","classification","setClassification","training","setTraining","processing","setProcessing","url","setUrl","useEffect","axios","then","response","data","className","style","maxWidth","padding","confidences","label","toPrecision","fontStyle","fontSize","type","onClick","evt","display","name","showUploadList","action","onChange","info","file","status","message","error","title","icon","UploadOutlined","textAlign","target","value","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,gNC6F5BC,MArFf,WAAgB,IAAD,EAC+BC,IAAMC,WADrC,mBACNC,EADM,KACUC,EADV,OAEmBH,IAAMC,UAAS,GAFlC,mBAENG,EAFM,KAEIC,EAFJ,OAGuBL,IAAMC,UAAS,GAHtC,mBAGNK,EAHM,KAGMC,EAHN,OAISP,IAAMC,WAJf,mBAINO,EAJM,KAIDC,EAJC,KAwBb,OAJAT,IAAMU,WAAU,WALdC,MAAA,WAAqBC,MAAK,SAAAC,GACxBR,EAAYQ,EAASC,KAAKV,eAM3B,IAGD,yBAAKW,UAAU,MAAMC,MAAO,CAACC,SAAU,IAAMC,QAAS,QACnDhB,EACC,6BACE,oCACyE,IAAlEA,EAAeiB,YAAYjB,EAAekB,OAAOC,YAAY,GADpE,wBAGA,yBAAKL,MAAO,CAAEM,UAAW,OAAQC,SAAU,QAAUrB,EAAekB,OAEpE,kBAAC,IAAD,CACEI,KAAM,UACNC,QAAS,SAACC,GACRvB,IACAM,MAJJ,eAWA,6BACe,GAAZL,GAAkC,GAAdE,EAAqB,6BACxC,kBAAC,IAAD,MACa,GAAZF,EAAmB,+GAA2F,KAChG,GAAdE,EAAqB,sFAAkE,MACjF,KAGT,0BAAMU,MAAO,CAACW,QAAqB,GAAZvB,GAAkC,GAAdE,EAAqB,OAAS,UACvE,kBAAC,IAAD,CACEsB,KAAM,SACNC,gBAAgB,EAChBC,OAAM,SACNC,SAAU,SAACC,GACTzB,GAAc,GACU,QAApByB,EAAKC,KAAKC,QACZ3B,GAAc,GACdJ,EAAkB6B,EAAKC,KAAKpB,SAASX,iBACP,UAArB8B,EAAKC,KAAKC,SACnB3B,GAAc,GACd4B,IAAQC,MAAMJ,EAAKC,KAAKpB,aAI5B,kBAAC,IAAD,CAASwB,MAAO,mBACd,kBAAC,IAAD,CAAQC,KAAM,kBAACC,EAAA,EAAD,UAGlB,yBAAKvB,MAAO,CAAEwB,UAAW,WAAzB,MACA,kBAAC,IAAD,CACET,SAAU,SAACL,GAAD,OAASjB,EAAOiB,EAAIe,OAAOC,QACrCC,YAAa,uBAEf,kBAAC,IAAD,CAAQlB,QAAS,kBAtE3BlB,GAAc,QACdI,OAAA,kBAA8B,CAAEH,IAAKA,IAAOI,MAAK,SAACC,GAChDN,GAAc,GACdJ,EAAkBU,EAASC,KAAKZ,qBAmExB,UCzEM0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMD,c","file":"static/js/main.18b5f50b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./App.css\";\r\nimport { Upload, message, Tooltip, Button, Input, Spin } from \"antd\";\r\nimport * as axios from \"axios\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\n\r\nfunction App() {\r\n  const [classification, setClassification] = React.useState();\r\n  const [training, setTraining] = React.useState(false)\r\n  const [processing, setProcessing] = React.useState(false)\r\n  const [url, setUrl] = React.useState();\r\n\r\n  const handleUrlRequest = (evt) => {\r\n    setProcessing(true)\r\n    axios.post(`/image-from-url`, { url: url }).then((response) => {\r\n      setProcessing(false)\r\n      setClassification(response.data.classification);\r\n    });\r\n  };\r\n\r\n  const checkIfTraining = evt => {\r\n    axios.get(`/status`).then(response => {\r\n      setTraining(response.data.training)\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    checkIfTraining()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\" style={{maxWidth: 1000, padding: \"1em\"}}>\r\n      {classification ? (\r\n        <div>\r\n          <div>\r\n            I'm {classification.confidences[classification.label].toPrecision(2) * 100}% sure that this is:\r\n            </div>\r\n          <div style={{ fontStyle: \"bold\", fontSize: \"2em\" }}>{classification.label}</div>\r\n\r\n          <Button\r\n            type={\"primary\"}\r\n            onClick={(evt) => {\r\n              setClassification();\r\n              setUrl();\r\n            }}\r\n          >\r\n            Start over\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n          <div>\r\n            {training == true || processing == true ? <div>\r\n              <Spin />\r\n              {training == true ? <h3>I'm currently busy with learning all about butterflies. Please try again later.</h3> : null}\r\n              {processing == true ? <h3>I'm trying to figure out what that was... Please wait.</h3> : null}\r\n            </div> : null\r\n            }\r\n\r\n            <span style={{display: training == true || processing == true ? \"none\" : \"block\"}}>\r\n              <Upload\r\n                name={\"upload\"}\r\n                showUploadList={false}\r\n                action={`/image`}\r\n                onChange={(info) => {\r\n                  setProcessing(true)\r\n                  if (info.file.status == \"done\") {\r\n                    setProcessing(false)\r\n                    setClassification(info.file.response.classification);\r\n                  } else if (info.file.status === \"error\") {\r\n                    setProcessing(false)\r\n                    message.error(info.file.response);\r\n                  }\r\n                }}\r\n              >\r\n                <Tooltip title={\"Upload an image\"}>\r\n                  <Button icon={<UploadOutlined />} />\r\n                </Tooltip>\r\n              </Upload>\r\n              <div style={{ textAlign: \"center\" }}>or</div>\r\n              <Input\r\n                onChange={(evt) => setUrl(evt.target.value)}\r\n                placeholder={\"Or paste a link...\"}\r\n              />\r\n              <Button onClick={() => handleUrlRequest()}>Go</Button>\r\n            </span>\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}